/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   create_export.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: gboggion <gboggion@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/16 19:55:29 by gboggion          #+#    #+#             */
/*   Updated: 2025/03/16 19:55:29 by gboggion         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../inc/execution.h"

static int fill_new_var(t_export *new_var, char *envp_var);
static void	append_node(t_struct_ptrs *data, t_export *new_var);
static t_export    *find_last(t_export *root);

int create_export(char **envp, t_struct_ptrs *data)
{
	t_export	*new_var;
	int			i;

	i = -1;
	if (!(data))
		return (0);
	new_var = (t_export){0};
	if (envp)
	{
		while (envp[++i])
		{
			new_var = malloc(sizeof(t_export));
			if (!new_var)
				return (0);
		//new_var->str = ft_strdup(envp[i]);
		//create_export_str(&new_var->str); //this can also be an option
		//if (!new_var->str)
			if (!fill_new_var(new_var, envp[i]))
				return (free(new_var), error_handling(data), -1);   //does the free still apply?
		//new_var->first_letter = new_var->str[0];
			new_var->next = NULL;
			if (!data->export)
			{
				data->export = new_var;
				new_var->prev = NULL;
			}
			else
				append_node(data, new_var);
		}
		sort_export(data);
	}
	return (1);
}

static int fill_new_var(t_export *new_var, char *envp_var)
{
	char    *tmp; 

	tmp = ft_strdup(envp_var);
	if (!tmp)
		return (0);
	new_var->first_letter = tmp[0];
	new_var->str = ft_strjoin("declare -x ", tmp);
	free(tmp);
	if (!new_var->str)
		return (0);
	return (1);
}

static void	append_node(t_struct_ptrs *data, t_export *new_var)  //Static or not??
{
	t_export	*last_var;

	last_var = find_last(data->export);
	last_var->next = new_var;
	new_var->prev = last_var;
}

static t_export    *find_last(t_export *root) //static or not??
{
	if (!root)
		return (NULL);
	while (root->next)
		root = root->next;
	return (root);
}
